
// Change package name as needed
package tarprogramada1;
/* Required methods in LangtonAnt class are:
    char[] getRules(): Returns current rules of the LA.
    int[][] getBoard(): Returns current board state.
    int[][] getAntPositions(): Returns the [x,y] positions for each ant.
    void setRules(char[] rules): Sets the LA rules to the specified array.
    void setBoardSize(int width, int height): Resizes the board to the specified width and height.
    void setNumberAnts(int numberAnts): Specifies the numbers of ants to use and places them.
    void reset(): Resets the simulation to an all 0 board and initial positions for ants.
    void takeStep(): Advances the ants by one step.
*/

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

/**
 * @author Blopa
 */
public class LangtonAntUI extends javax.swing.JFrame implements Runnable {

  private Color[] colors;
  private Color antColor;
  private final LangtonAnt game;
  private final long refresh;
  private long fps;
  private int[] rightAlignment;
  private int step;
  private boolean playing;

  private javax.swing.JFrame colorsFrame;
  private javax.swing.JLabel[] colorsLabels;
  private ColorButton[] colorsButtons;

  /**
   * Creates new form LangtonAntUI
   */
  public LangtonAntUI(LangtonAnt mainGame) {
    game = mainGame;
    antColor = new Color(255, 0, 0);
    colors = new Color[12];
    colors[0] = new Color(0, 0, 0);
    colors[1] = new Color(255, 255, 255);
    colors[2] = new Color(0, 255, 0);
    colors[3] = new Color(0, 0, 255);
    colors[4] = new Color(255, 0, 255);
    colors[5] = new Color(0, 255, 255);
    colors[6] = new Color(255, 255, 0);
    colors[7] = new Color(255, 128, 0);
    colors[8] = new Color(128, 255, 0);
    colors[9] = new Color(128, 0, 255);
    colors[10] = new Color(255, 0, 128);
    colors[11] = new Color(0, 255, 128);
    fps = 10;
    refresh = 10;
    initComponents();
    this.getContentPane().setBackground(new Color(208, 240, 250));
    RuleLabel.setText("Rules: " + new String(game.getRules()));
    AntsLabel.setText("Number of Ants: " + game.getAntPositions().length);
    BoardLabel.setText("Board Size: " + game.getBoard().length + "x" + game.getBoard()[0].length);
    FPSLabel.setText("FPS: " + fps);
    resetBoard();
    playing = false;
  }

  private void resetBoard() {
    step = 0;
    StepLabel.setText("Step: " + step);
    game.reset();
    redraw();
  }

  private void redraw() {
    Canvas.repaint();
  }

  private void drawBoard(Graphics g) {
    g.setColor(Color.black);
    g.fillRect(0, 0, Canvas.getWidth(), Canvas.getHeight());
    int[][] board = game.getBoard();
    double dheight = (double) (Canvas.getHeight()) / (double) (board.length);
    double dwidth = (double) (Canvas.getWidth()) / (double) (board[0].length);
    double dx, dy;
    for (int r = 0; r < board.length; r++) {
      for (int c = 0; c < board[0].length; c++) {
        g.setColor(colors[board[r][c] % colors.length]);
        dy = r * dheight;
        dx = c * dwidth;
        g.fillRect((int) (dx), (int) (dy), (int) (dx + dwidth) - (int) (dx), (int) (dy + dheight) - (int) (dy));
      }
    }
    if (VisibilityCheckbox.isSelected()) {
      int[][] positions = game.getAntPositions();
      g.setColor(antColor);
      for (int[] position : positions) {
        dy = position[1] * dheight;
        dx = position[0] * dwidth;
        g.fillRect((int) (dx), (int) (dy), (int) (dx + dwidth) - (int) (dx), (int) (dy + dheight) - (int) (dy));
      }
    }
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated
  // Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    Canvas = new javax.swing.JPanel() {
      @Override
      public void paintComponent(Graphics g) {
        drawBoard(g);
      }
    };
    MainLabel = new javax.swing.JLabel();
    RuleLabel = new javax.swing.JLabel();
    RuleButton = new javax.swing.JButton();
    AntsLabel = new javax.swing.JLabel();
    AntsButton = new javax.swing.JButton();
    BoardLabel = new javax.swing.JLabel();
    BoardButton = new javax.swing.JButton();
    StepLabel = new javax.swing.JLabel();
    ResetButton = new javax.swing.JButton();
    NextButton = new javax.swing.JButton();
    GotoButton = new javax.swing.JButton();
    VisibilityCheckbox = new javax.swing.JCheckBox();
    PlayButton = new javax.swing.JButton();
    FPSLabel = new javax.swing.JLabel();
    FPSButton = new javax.swing.JButton();
    ColorButton = new javax.swing.JButton();
    SaveButton = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("Langton's Ant");
    setBounds(new java.awt.Rectangle(0, 0, 0, 0));
    setMinimumSize(new java.awt.Dimension(820, 600));
    setName("LangtonAntUI"); // NOI18N
    setPreferredSize(new java.awt.Dimension(820, 600));
    addComponentListener(new java.awt.event.ComponentAdapter() {
      public void componentResized(java.awt.event.ComponentEvent evt) {
        formComponentResized(evt);
      }
    });
    getContentPane().setLayout(null);

    Canvas.setLayout(null);
    getContentPane().add(Canvas);
    Canvas.setBounds(10, 10, 540, 540);

    MainLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    MainLabel.setText("Langton's Ant");
    getContentPane().add(MainLabel);
    MainLabel.setBounds(630, 20, 110, 30);

    RuleLabel.setText("Rules:");
    getContentPane().add(RuleLabel);
    RuleLabel.setBounds(570, 60, 180, 30);

    RuleButton.setText("Change");
    RuleButton.setToolTipText("Change the rules used by the ants");
    RuleButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        RuleButtonActionPerformed(evt);
      }
    });
    getContentPane().add(RuleButton);
    RuleButton.setBounds(710, 67, 80, 23);

    AntsLabel.setText("Number of Ants:");
    getContentPane().add(AntsLabel);
    AntsLabel.setBounds(570, 104, 130, 40);

    AntsButton.setText("Change");
    AntsButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        AntsButtonActionPerformed(evt);
      }
    });
    getContentPane().add(AntsButton);
    AntsButton.setBounds(710, 110, 80, 23);

    BoardLabel.setText("Board Size:");
    getContentPane().add(BoardLabel);
    BoardLabel.setBounds(570, 150, 140, 40);

    BoardButton.setText("Change");
    BoardButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        BoardButtonActionPerformed(evt);
      }
    });
    getContentPane().add(BoardButton);
    BoardButton.setBounds(710, 160, 80, 23);

    StepLabel.setText("Step: ");
    getContentPane().add(StepLabel);
    StepLabel.setBounds(570, 190, 160, 40);

    ResetButton.setText("Reset");
    ResetButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        ResetButtonActionPerformed(evt);
      }
    });
    getContentPane().add(ResetButton);
    ResetButton.setBounds(560, 230, 70, 60);

    NextButton.setText("Next");
    NextButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        NextButtonActionPerformed(evt);
      }
    });
    getContentPane().add(NextButton);
    NextButton.setBounds(640, 230, 70, 60);

    GotoButton.setText("Goto");
    GotoButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        GotoButtonActionPerformed(evt);
      }
    });
    getContentPane().add(GotoButton);
    GotoButton.setBounds(720, 230, 70, 60);

    VisibilityCheckbox.setBackground(new java.awt.Color(208, 240, 250));
    VisibilityCheckbox.setSelected(true);
    VisibilityCheckbox.setText("Show ants");
    VisibilityCheckbox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        VisibilityCheckboxActionPerformed(evt);
      }
    });
    getContentPane().add(VisibilityCheckbox);
    VisibilityCheckbox.setBounds(560, 300, 190, 40);

    PlayButton.setText("Play");
    PlayButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        PlayButtonActionPerformed(evt);
      }
    });
    getContentPane().add(PlayButton);
    PlayButton.setBounds(720, 360, 80, 30);

    FPSLabel.setText("FPS:");
    getContentPane().add(FPSLabel);
    FPSLabel.setBounds(570, 360, 70, 30);

    FPSButton.setText("Change");
    FPSButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        FPSButtonActionPerformed(evt);
      }
    });
    getContentPane().add(FPSButton);
    FPSButton.setBounds(630, 360, 80, 30);

    ColorButton.setText("Change Colors");
    ColorButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        ColorButtonActionPerformed(evt);
      }
    });
    getContentPane().add(ColorButton);
    ColorButton.setBounds(630, 430, 160, 30);

    SaveButton.setText("Save Image");
    SaveButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        SaveButtonActionPerformed(evt);
      }
    });
    getContentPane().add(SaveButton);
    SaveButton.setBounds(630, 490, 160, 30);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void RuleButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_RuleButtonActionPerformed
    String text = JOptionPane.showInputDialog("Write the new ruleset:");
    if (text != null) {
      text = text.toUpperCase();
      game.setRules(text.toCharArray());
      RuleLabel.setText("Rules: " + new String(game.getRules()));
      resetBoard();
    }
  }// GEN-LAST:event_RuleButtonActionPerformed

  private void AntsButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_AntsButtonActionPerformed
    try {
      int number = Integer.parseInt(JOptionPane.showInputDialog("How many ants on the board?"));
      if (number >= 1) {
        game.setNumberAnts(number);
        AntsLabel.setText("Number of Ants: " + game.getAntPositions().length);
        resetBoard();
      }
    } catch (NumberFormatException e) {
    }
  }// GEN-LAST:event_AntsButtonActionPerformed

  private void ResetButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_ResetButtonActionPerformed
    if (playing) {
      return;
    }
    resetBoard();
  }// GEN-LAST:event_ResetButtonActionPerformed

  private void NextButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_NextButtonActionPerformed
    if (playing) {
      return;
    }
    game.takeStep();
    step++;
    StepLabel.setText("Step: " + step);
    redraw();
  }// GEN-LAST:event_NextButtonActionPerformed

  private void GotoButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_GotoButtonActionPerformed
    if (playing) {
      return;
    }
    try {
      int number = Integer.parseInt(JOptionPane.showInputDialog("Go to which step?"));
      if (number < step) {
        resetBoard();
      }
      while (step < number) {
        game.takeStep();
        step++;
      }
      StepLabel.setText("Step: " + step);
      redraw();
    } catch (NumberFormatException e) {
    }
  }// GEN-LAST:event_GotoButtonActionPerformed

  private void BoardButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_BoardButtonActionPerformed
    int number;
    try {
      number = Integer.parseInt(JOptionPane.showInputDialog("How many rows (height)?"));
    } catch (NumberFormatException e) {
      number = 0;
    }
    int rows = (number > 0 && number != game.getBoard().length) ? number : game.getBoard().length;
    try {
      number = Integer.parseInt(JOptionPane.showInputDialog("How many columns (width)?"));
    } catch (NumberFormatException e) {
      number = 0;
    }
    int cols = (number > 0 && number != game.getBoard()[0].length) ? number : game.getBoard()[0].length;
    if (rows != game.getBoard().length || cols != game.getBoard()[0].length) {
      game.setBoardSize(rows, cols);
      BoardLabel.setText("Board Size: " + game.getBoard().length + "x" + game.getBoard()[0].length);
      resetBoard();
    }
  }// GEN-LAST:event_BoardButtonActionPerformed

  private void VisibilityCheckboxActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_VisibilityCheckboxActionPerformed
    redraw();
  }// GEN-LAST:event_VisibilityCheckboxActionPerformed

  private void PlayButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_PlayButtonActionPerformed
    playing = !playing;
    if (playing) {
      PlayButton.setText("Stop");
      Thread t = new Thread(this);
      t.start();
    } else {
      PlayButton.setText("Play");
    }
  }// GEN-LAST:event_PlayButtonActionPerformed

  private void FPSButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_FPSButtonActionPerformed
    try {
      int number = Integer.parseInt(JOptionPane.showInputDialog("How many frames per second (FPS)?"));
      fps = number;
      FPSLabel.setText("FPS: " + fps);
    } catch (NumberFormatException e) {
    }
  }// GEN-LAST:event_FPSButtonActionPerformed

  private void ColorButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_ColorButtonActionPerformed
    colorsFrame = new javax.swing.JFrame();
    javax.swing.JButton add = new javax.swing.JButton(), remove = new javax.swing.JButton();
    javax.swing.JLabel antLabel = new javax.swing.JLabel();
    ColorButton antColorButton = new ColorButton(this, antColor, -1);
    // Frame
    colorsFrame.setTitle("Color Chooser");
    colorsFrame.setMinimumSize(new Dimension(350, 600));
    colorsFrame.getContentPane().setBackground(new Color(208, 240, 250));
    colorsFrame.setLayout(null);
    // Add/remove buttons
    remove.setText("-");
    colorsFrame.getContentPane().add(remove);
    remove.setBounds(50, 20, 100, 30);
    remove.addActionListener((java.awt.event.ActionEvent evt1) -> {
      removeColor();
    });
    add.setText("+");
    colorsFrame.getContentPane().add(add);
    add.setBounds(200, 20, 100, 30);
    add.addActionListener((java.awt.event.ActionEvent evt1) -> {
      addColor();
    });
    // Ants color
    antLabel.setText("Color Ants:");
    colorsFrame.getContentPane().add(antLabel);
    antLabel.setBounds(50, 100, 100, 20);
    antColorButton.setBackground(antColor);
    colorsFrame.getContentPane().add(antColorButton);
    antColorButton.setBounds(180, 100, 70, 20);
    // State colors
    colorsLabels = new javax.swing.JLabel[colors.length];
    colorsButtons = new ColorButton[colors.length];
    for (int c = 0; c < colors.length; c++) {
      colorsLabels[c] = new javax.swing.JLabel();
      colorsLabels[c].setText("Color State " + c + ":");
      colorsFrame.getContentPane().add(colorsLabels[c]);
      colorsLabels[c].setBounds(50, 100 + (c + 1) * 30, 100, 20);
      colorsButtons[c] = new ColorButton(this, colors[c], c);
      colorsFrame.getContentPane().add(colorsButtons[c]);
      colorsButtons[c].setBounds(180, 100 + (c + 1) * 30, 70, 20);
    }
    colorsFrame.pack();
    colorsFrame.setVisible(true);
  }// GEN-LAST:event_ColorButtonActionPerformed

  private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_SaveButtonActionPerformed
    int[][] board = game.getBoard();
    BufferedImage image = new BufferedImage(board[0].length, board.length, BufferedImage.TYPE_3BYTE_BGR);
    for (int r = 0; r < board.length; r++) {
      for (int c = 0; c < board[0].length; c++) {
        image.setRGB(c, r, colors[board[r][c]].getRGB());
      }
    }
    if (VisibilityCheckbox.isSelected()) {
      int[][] positions = game.getAntPositions();
      for (int[] position : positions) {
        image.setRGB(position[0], position[1], antColor.getRGB());
      }
    }
    JFileChooser fileChooser = new JFileChooser();
    fileChooser.removeChoosableFileFilter(fileChooser.getAcceptAllFileFilter());
    fileChooser.addChoosableFileFilter(new FileFilter() {
      @Override
      public boolean accept(File f) {
        if (f.isDirectory()) {
          return true;
        } else {
          return f.getName().endsWith(".png");
        }
      }

      @Override
      public String getDescription() {
        return "PNG files";
      }
    });
    fileChooser.setSelectedFile(new File("LangtonAnt-" + new String(game.getRules()) + "-s" + step + ".png"));
    int selection = fileChooser.showSaveDialog(null);
    if (selection == JFileChooser.APPROVE_OPTION) {
      try {
        ImageIO.write(image, "png", fileChooser.getSelectedFile());
      } catch (IOException ex) {
        javax.swing.JOptionPane.showMessageDialog(null, "Error writing to file.", "ERROR",
            javax.swing.JOptionPane.ERROR_MESSAGE);
      }
    }
  }// GEN-LAST:event_SaveButtonActionPerformed

  private void formComponentResized(java.awt.event.ComponentEvent evt) {// GEN-FIRST:event_formComponentResized
    Component[] comps = new Component[] { AntsButton, AntsLabel, BoardButton, BoardLabel, ColorButton, FPSButton,
        FPSLabel, GotoButton, MainLabel, NextButton, PlayButton, ResetButton, RuleButton, RuleLabel, SaveButton,
        StepLabel, VisibilityCheckbox };
    if (rightAlignment == null) {
      rightAlignment = new int[comps.length];
      for (int c = 0; c < comps.length; c++) {
        rightAlignment[c] = this.getWidth() - comps[c].getX();
      }
    } else {
      for (int c = 0; c < comps.length; c++) {
        comps[c].setBounds(this.getWidth() - rightAlignment[c], comps[c].getY(), comps[c].getWidth(),
            comps[c].getHeight());
      }
      Canvas.setBounds(Canvas.getX(), Canvas.getY(), getWidth() - 280, getHeight() - 60);
    }
  }// GEN-LAST:event_formComponentResized

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton AntsButton;
  private javax.swing.JLabel AntsLabel;
  private javax.swing.JButton BoardButton;
  private javax.swing.JLabel BoardLabel;
  private javax.swing.JPanel Canvas;
  private javax.swing.JButton ColorButton;
  private javax.swing.JButton FPSButton;
  private javax.swing.JLabel FPSLabel;
  private javax.swing.JButton GotoButton;
  private javax.swing.JLabel MainLabel;
  private javax.swing.JButton NextButton;
  private javax.swing.JButton PlayButton;
  private javax.swing.JButton ResetButton;
  private javax.swing.JButton RuleButton;
  private javax.swing.JLabel RuleLabel;
  private javax.swing.JButton SaveButton;
  private javax.swing.JLabel StepLabel;
  private javax.swing.JCheckBox VisibilityCheckbox;
  // End of variables declaration//GEN-END:variables

  private void addColor() {
    Color[] newColors = new Color[colors.length + 1];
    javax.swing.JLabel[] newLabels = new javax.swing.JLabel[colors.length + 1];
    ColorButton[] newButtons = new ColorButton[colors.length + 1];
    for (int c = 0; c < colors.length; c++) {
      newColors[c] = colors[c];
      newLabels[c] = colorsLabels[c];
      newButtons[c] = colorsButtons[c];
    }
    newColors[colors.length] = new Color(0, 0, 0);
    newLabels[colors.length] = new javax.swing.JLabel();
    newLabels[colors.length].setText("Color State " + colors.length + ":");
    colorsFrame.getContentPane().add(newLabels[colors.length]);
    newLabels[colors.length].setBounds(50, 100 + (colors.length + 1) * 30, 100, 20);
    newButtons[colors.length] = new ColorButton(this, newColors[colors.length], colors.length);
    colorsFrame.getContentPane().add(newButtons[colors.length]);
    newButtons[colors.length].setBounds(180, 100 + (colors.length + 1) * 30, 70, 20);
    colorsFrame.pack();
    colors = newColors;
    colorsLabels = newLabels;
    colorsButtons = newButtons;
  }

  private void removeColor() {
    if (colors.length <= 1) {
      return;
    }
    Color[] newColors = new Color[colors.length - 1];
    javax.swing.JLabel[] newLabels = new javax.swing.JLabel[colors.length - 1];
    ColorButton[] newButtons = new ColorButton[colors.length - 1];
    for (int c = 0; c < colors.length - 1; c++) {
      newColors[c] = colors[c];
      newLabels[c] = colorsLabels[c];
      newButtons[c] = colorsButtons[c];
    }
    colorsFrame.remove(colorsLabels[colors.length - 1]);
    colorsFrame.remove(colorsButtons[colors.length - 1]);
    colorsFrame.revalidate();
    colorsFrame.repaint();
    colors = newColors;
    colorsLabels = newLabels;
    colorsButtons = newButtons;
  }

  class ColorButton extends javax.swing.JButton {
    LangtonAntUI owner;
    Color color;
    int index;

    public ColorButton(LangtonAntUI owner, Color color, int index) {
      this.owner = owner;
      this.color = color;
      this.index = index;
      this.setBackground(color);
      this.addActionListener((java.awt.event.ActionEvent evt) -> {
        changeColor();
      });
    }

    private void changeColor() {
      Color newColor = javax.swing.JColorChooser.showDialog(null, "Select a new color", color);
      if (newColor != null) {
        color = newColor;
        this.setBackground(color);
        owner.changeColor(newColor, index);
      }
    }
  }

  public void changeColor(Color newColor, int index) {
    if (index == -1) {
      antColor = newColor;
    } else {
      colors[index] = newColor;
    }
    redraw();
  }

  @Override
  public void run() {
    double dtime = 1000.0 / (double) (fps);
    double ctime = 0;
    double rdtime = 1000.0 / (double) (refresh);
    double rctime = 0;
    long ltime = System.currentTimeMillis();
    while (playing) {
      long ntime = System.currentTimeMillis();
      ctime += ntime - ltime;
      rctime += ntime - ltime;
      ltime = ntime;
      if (ctime >= dtime) {
        game.takeStep();
        step++;
        ctime -= dtime;
        if (rctime >= rdtime) {
          StepLabel.setText("Step: " + step);
          redraw();
          rctime -= rdtime;
        }
      } else {
        try {
          Thread.sleep((long) (dtime - ctime));
        } catch (InterruptedException ex) {
          System.out.println("How did this even happen?");
        }
      }
    }
  }
}
